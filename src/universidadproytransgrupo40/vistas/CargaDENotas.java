/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package universidadproytransgrupo40.vistas;

import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadproytransgrupo40.accesoADatos.AlumnoData;
import universidadproytransgrupo40.accesoADatos.InscripcionData;
import universidadproytransgrupo40.entidades.Alumno;
import universidadproytransgrupo40.entidades.Materia;
/**
 *
 * @author eduardo
 */
public class CargaDENotas extends javax.swing.JInternalFrame {
    
    
    
    private static   AlumnoData aluData = new AlumnoData();
    private static   InscripcionData inscripciondata = new InscripcionData();
    
private DefaultTableModel modelo = new DefaultTableModel(){
    @Override
    public boolean isCellEditable(int fila, int columna){
        if (columna==2){
            return true;
        }else{
            return false;
        }
    }
};
private double notaultima;
Alumno alumnoSeleccionado;
Materia materiaSeleccionada;
private int idMateria;
        
private double nota=99; // se elije numero arbitrario para que se entienda que se debe cargar la nota
                        // solo carga la nota no interesa que nota tiene en la bd, no consulta la bd la actualiza
    /**
     * Creates new form Inscripciones
     */
    public CargaDENotas() {
        initComponents();
        cargarComboBox();
        armarCabecera();
     
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbAlumno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMaterias = new javax.swing.JTable();
        jbInscribir = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(0, 153, 0));
        setClosable(true);
        setTitle("Carga de Notas");
        setPreferredSize(new java.awt.Dimension(600, 450));

        jPanel2.setBackground(new java.awt.Color(0, 204, 102));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Carga de Notas");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Seleccione un alumno:");

        jcbAlumno.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jcbAlumno.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jcbAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnoActionPerformed(evt);
            }
        });

        jtMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtMaterias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtMateriasMouseClicked(evt);
            }
        });
        jtMaterias.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtMateriasPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jtMaterias);

        jbInscribir.setText("Guardar");
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jbInscribir, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(131, 131, 131)
                        .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbAlumno)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbInscribir, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnoActionPerformed
        
        try {
             borrarFilas(); 
        alumnoSeleccionado = (Alumno) jcbAlumno.getSelectedItem();
           
             List<Materia> materias;
             
       
            materias = inscripciondata.obtenerMateriasCursadas(alumnoSeleccionado.getIdAlumno());
        
            
             for (Materia materia : materias) {
                 modelo.addRow(new Object []{
                     materia.getIdMateria(),
                     materia.getNombre(),
                     /*
                    select inscripcion.idMateria,materia.nombre,inscripcion.nota
                    from inscripcion
                    join materia
                    on(materia.idMateria=inscripcion.idMateria)
                    join alumno
                    on(alumno.idAlumno=inscripcion.idAlumno)
                    WHERE alumno.idAlumno=1;
                     */
                     
                     
                     nota}); //habria que crear un metodo que me traiga la nota del alumno de esa materia
                 
             }
            
             } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Error que sale " + ex.getMessage());
        }
             
    }//GEN-LAST:event_jcbAlumnoActionPerformed

    
    
    
    
    private void jtMateriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMateriasMouseClicked



        
       
        
        int filaSeleccionada = jtMaterias.getSelectedRow();
        if(filaSeleccionada!=-1){
//
//            
//            
            idMateria=(Integer) jtMaterias.getValueAt(filaSeleccionada, 0);
//            nombre = (String) jtMaterias.getValueAt(filaSeleccionada,1);
            
       
//            String notas;
//            notas = (String) (jtMaterias.getValueAt(filaSeleccionada,2));
//            nota= Double.parseDouble(notas);
//            activo=true;
//            materiaSeleccionada= new Materia(idMateria,nombre,anioMateria,activo);
//            
        }
    }//GEN-LAST:event_jtMateriasMouseClicked

   
 
    
    
    
    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed

        inscripciondata.actualizarNota(idMateria, (int) alumnoSeleccionado.getIdAlumno(), notaultima);
                    int filaSeleccionada = jtMaterias.getSelectedRow();
            if(filaSeleccionada!=-1){
                
            modelo.removeRow(filaSeleccionada);
            }
       

//        try { 
//        Inscripcion inscripcion=new Inscripcion(alumnoSeleccionado,materiaSeleccionada,-1);
//       
//            inscripciondata.guardarInscripcion(inscripcion);
//        } catch (SQLException ex) {
//            Logger.getLogger(CargaDENotas.class.getName()).log(Level.SEVERE, null, ex);
//        }
//               
       
    }//GEN-LAST:event_jbInscribirActionPerformed

    
    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
         
          this.dispose();    
          
        
        
        
        
        
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jtMateriasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtMateriasPropertyChange
       try{
        int nuevafilaSeleccionada = jtMaterias.getSelectedRow();
        if(nuevafilaSeleccionada!=-1){
//
           jtMaterias.setEditingColumn(2);
           
                      String notas;
//            notas = (String) (jtMaterias.getValueAt(filaSeleccionada,2));
//            
            notas=  (jtMaterias.getValueAt(nuevafilaSeleccionada, 2))+"";
           // notaultima=(Double) jtMaterias.getValueAt(nuevafilaSeleccionada, 2);
        notaultima= Double.parseDouble(notas);
        
    }//GEN-LAST:event_jtMateriasPropertyChange
       }catch(ClassCastException ex){
           System.out.println("problemassss" + ex.getMessage());
       }
       }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbAlumno;
    private javax.swing.JTable jtMaterias;
    // End of variables declaration//GEN-END:variables


private void cargarComboBox(){
  
    List<Alumno> alumnos = aluData.listarAlumnos();
     for (Alumno alu : alumnos){
        jcbAlumno.addItem(alu);
     }
}


 private void armarCabecera(){
        
        CabeceraTablaNotas[] tope = CabeceraTablaNotas.values();
        for (int i=0;i<tope.length;i++){
            modelo.addColumn(tope[i]);
            
        }
        
        jtMaterias.setModel(modelo);
        
        
        
    }

    private void borrarFilas(){
        
        while (jtMaterias.getRowCount()>0){
            modelo.removeRow(0);
        }
                
        
        
        //int fila=jtMaterias.getRowCount()-1;
        //for (; fila>=0; fila--) {
         //   modelo.removeRow(fila);
        //}
        
        
        
        
    }





}// end class
